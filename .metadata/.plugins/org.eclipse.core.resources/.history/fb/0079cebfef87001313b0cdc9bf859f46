import hm.entrySet;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;

public class MaxHeap
{
    private int size;
    private int maxsize;
    private SitesHashMap hm;
	private ArrayList<Entry<String, Integer>> Heap;
 
    private static final int FRONT = 1;
    
 
    @SuppressWarnings("unchecked")
	public MaxHeap(int maxsize)
    {
    	hm = new SitesHashMap();
        this.maxsize = maxsize;
        this.size = 0;
        Heap = (ArrayList<Entry<String, Integer>>) hm.entrySet();
        Heap.add(0, new Frequency("test"));
    }

	public MaxHeap(Collection<Entry<String, Integer>> hmEntrySet)
    {
    	this.maxsize = hmEntrySet.size();
    	this.size = this.maxsize;
        //Heap = new Frequency[this.maxsize + 1];
        Heap.add(0, new Frequency("test"));
        int i=0;
        Iterator<Entry<String, Integer>> iter = hmEntrySet.iterator();
    	while(iter.hasNext())
    	{
    		i++;
    		Entry<String, Integer> next = iter.next();
    		Heap.add(i, new Frequency(next.getKey(), next.getValue()));	
    	}
    	
    	maxHeap();

    }
 
    public MaxHeap(ArrayList<Entry<String, Integer>> subheap) {
    	this.maxsize = subheap.size();
        this.size = subheap.size() -1;
        Heap = subheap;
        Heap.add(0, new Frequency("test"));
        
	}

	private int parent(int pos)
    {
        return pos / 2;
    }
 
    private int leftChild(int pos)
    {
        return (2 * pos);
    }
 
    private int rightChild(int pos)
    {
        return (2 * pos) + 1;
    }
 
    private boolean isLeaf(int pos)
    {
        if (pos >=  (size / 2)  &&  pos <= size)
        {
            return true;
        }
        return false;
    }
 
    private void swap(int fpos,int spos)
    {
        Entry<String, Integer> tmp;
        tmp = Heap.get(fpos);
        Heap.set(fpos,Heap.get(spos));
        Heap.set(spos,tmp);
    }
 
    private void maxHeapify(int pos)
    {
        if (!isLeaf(pos))
        { 
            if ( Heap.get(pos).getValue() < Heap.get(leftChild(pos)).getValue() || Heap.get(pos).getValue() < Heap.get(rightChild(pos)).getValue())
            {
                if (Heap.get(leftChild(pos)).getValue() > Heap.get(rightChild(pos)).getValue())
                {
                    swap(pos, leftChild(pos));
                    maxHeapify(leftChild(pos));
                }else
                {
                    swap(pos, rightChild(pos));
                    maxHeapify(rightChild(pos));
                }
            }
        }
    }
 
    public void insert(String site)
    {
    	hm.insertSite(site);
    	Heap = (ArrayList<Entry<String, Integer>>) hm.entrySet();
        int current = Heap.size();
 
        while(Heap.get(current).getValue() > Heap.get(parent(current)).getValue())
        {
            swap(current,parent(current));
            current = parent(current);
        }
    }
 
    public void print()
    {
        for (int i = 1; i < size / 2; i++ )
        {
            System.out.print(" PARENT : " + Heap.get(i).getValue() + Heap.get(i).getKey() + " LEFT CHILD : " + Heap.get(2*i).getValue() + Heap.get(2*i).getKey()
                  + " RIGHT CHILD :" + Heap.get(2 * i  + 1).getValue() + Heap.get(2 * i  + 1).getKey());
            System.out.println();
        }
    }
 
    public void maxHeap()
    {
        for (int pos = (size / 2); pos >= 1; pos--)
        {
            maxHeapify(pos);
        }
    }
 
    public Frequency remove()
    {
        Frequency popped = Heap[FRONT];
        Heap[FRONT] = Heap[size--];
        maxHeapify(FRONT);
        return popped;
    }
    
    public ArrayList<Frequency> top(Integer k)
    {
    	ArrayList<Frequency> output = new ArrayList<Frequency>();
    	MaxHeap subheap;
    	if(k > (Math.log(1000000)/Math.log(2)))
		{
    		subheap = this;
		}
    	else
    	{
	    	Frequency subarray[] = new Frequency[(int)Math.pow(k+1, 2) + 1];
	    	for(int l=0; l<= Math.pow(k+1,2);l++)
	    	{
	    		subarray[l] = Heap[l];
	    	}
	    	subheap = new MaxHeap(subarray);

    	}
    	for(int m=1;m<k;m++)
    	{
    		output.add(subheap.remove());
    	}
    	return output;
    	
    	
    	
    }
    
    public static MaxHeap createHeap(ArrayList<String> input)
    {
    	MaxHeap output = new MaxHeap(input.size());
    	for(String s: input)
    	{
    		output.insert(new Frequency(s));
    		System.out.println(s);
    	}
    	return output;
    }
 
    public static void main(String...arg)
    {
        System.out.println("The Max Heap is ");
        MaxHeap maxHeap = new MaxHeap(15);
        maxHeap.insert(new Frequency("www.sean.com"));
        maxHeap.insert(new Frequency("www.vineel.com"));
        maxHeap.insert(new Frequency("www.bonnie.com"));
        maxHeap.insert(new Frequency("www.sean.com"));
        maxHeap.insert(new Frequency("www.bonnie.com"));
        maxHeap.insert(new Frequency("www.vineel.com"));
        maxHeap.insert(new Frequency("www.sean.com"));
        maxHeap.insert(new Frequency("www.vineel.com"));
        maxHeap.insert(new Frequency("www.bonnie.com"));
        maxHeap.insert(new Frequency("www.jen.com"));
 
        maxHeap.print();
        //System.out.println("The max val is " + maxHeap.remove());
    }
}